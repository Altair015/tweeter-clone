import fs from "node:fs";
import Tweet from "../models/tweetModel.js";

export const createTweet = async (req, res) => {
  console.log("createNewTweet", req.body, req.file, req.params);
  try {
    const { newTweetContent: content } = req.body;
    const { userId } = req.cookies.auth;

    let fileNameWithExt = null;

    if (req.file) {
      const { mimetype, filename } = req.file;

      const [fileType, ext] = mimetype.split("/");
      fileNameWithExt = `${filename}.${ext}`;

      // the 'filename' is auto_generated by multer, the real name will be 'originalname'
      // incase 'type' needs to be checked, better to put in multer config
      // to add extension at the end of the file
      fs.renameSync(
        `./public/uploads/${filename}`,
        `./public/uploads/${fileNameWithExt}`,
        function (err) {
          new Error("An error occured when renaming the file");
        }
      );
    }
    // Save the tweet to the database
    const newTweet = new Tweet({
      content,
      image: fileNameWithExt,
      tweeted_by: userId,
    });

    const dbResponse = await newTweet.save();

    const painObject = dbResponse.toJSON();

    console.log(painObject);

    res.status(200).json({
      message: "image uploaded successfully.",
      tweet: painObject,
    });
  } catch (error) {
    res.status(500).send({ message: error.message });
  }
};

export const getAllTweets = async (req, res) => {
  try {
    // Find all tweets, orderBy createAt, desc
    const tweets = await Tweet.find()
      .populate({
        path: "tweeted_by",
        select: "username proile_img",
      })
      .populate({ path: "retweeted_by", select: "username fullname" })
      .sort({ createdAt: -1 })
      .exec();

    console.log(tweets);

    res.status(200).json(tweets);
  } catch (error) {
    console.log(error);
    res.status(500).send({ message: error.message });
  }
};

export const replyTweet = async (req, res) => {
  const { tweet_id } = req.params;
  const { userId } = req.cookies.auth;
  const { content } = req.body;

  try {
    // create new Tweet, collect the _id,
    const newTweet = new Tweet({
      content,
      tweeted_by: userId,
    });

    const response = await newTweet.save();

    const { _id: comment_tweet_id } = response;

    // use the _id to push to parentTweet replies
    const tweet = await Tweet.findOneAndUpdate(
      { _id: tweet_id },
      {
        $push: {
          comments: { content, commented_by: userId },
          replies: comment_tweet_id,
        },
      },
      {
        new: true,
      }
    );

    const painObject = tweet.toJSON();

    res.status(200).json({
      message: "tweet successfully registered.",
      tweet: painObject,
    });
  } catch (error) {
    console.log(error);
    res.status(500).send({ message: error.message });
  }
};

export const likeTweet = async (req, res) => {
  const { tweet_id } = req.params;
  const { userId } = req.cookies.auth;

  const tweet = await Tweet.findOneAndUpdate(
    { _id: tweet_id },
    {
      $push: { likes: userId },
    },
    { new: true }
  );

  res.status(200).json({ tweet });
  try {
  } catch (error) {
    console.log(error);
    res.status(500).send({ message: error.message });
  }
};

export const dislikeTweet = async (req, res) => {
  const { tweet_id } = req.params;
  const { userId } = req.cookies.auth;

  const tweet = await Tweet.findOneAndUpdate(
    { _id: tweet_id },
    {
      $pull: {
        likes: userId,
      },
    },
    { new: true }
  );

  res.status(200).json({ tweet });
  try {
  } catch (error) {
    console.log(error);
    res.status(500).send({ message: error.message });
  }
};

export const retweet = async (req, res) => {
  const { tweet_id } = req.params;
  const { userId } = req.cookies.auth;

  console.log(userId);

  try {
    const tweet = await Tweet.findOneAndUpdate(
      { _id: tweet_id },
      {
        $push: {
          retweeted_by: userId,
        },
      },
      { new: true }
    )
      .populate({ path: "retweeted_by", select: "username fullname" })
      // .populate("retweeted_by")
      .exec();

    // const tweet = await Tweet.findOne({ _id }).populate("retweeted_by");

    res.status(200).json({ tweet });
  } catch (error) {
    console.log(error);
    res.status(500).send({ message: error.message });
  }
};
